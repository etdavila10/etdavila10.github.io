---
import TechCard from './TechCard.astro';
---

<div id='coding' class='mb-32'>
  <div class='flex gap-3 items-center mb-3'>
    <div class='h-6 w-6 bg-coral rounded-full'></div>
    <h1 class='text-5xl font-display text-coral font-bold'>Software</h1>
  </div>
  <div class='border-coral border rounded-xl bg-coral bg-opacity-10 p-6 mb-24'>
    <p class='mb-3'>
      I love creating new websites on my downtime. All of my web development knowledge is self taught. My favorite thing at the moment is learning a new javascript framework and creating fun websites with the learning. Aside from web development, I spend most of my time working in symbolic languages. As a mathematician, algebraic programming systems are very important for understanding complex mathematical structures. These programming languages usually lead to insights and help to assist in proving mathematical conjectures.
    </p>
    <p>
      I am passionate about crafting innovative websites during my free time, driven by my self-taught expertise in web development. Currently, my focus lies in exploring new JavaScript frameworks, finding joy in the creative process of building engaging websites while expanding my programming skills. Beyond web development, my primary professional interest lies in symbolic languages. As a mathematician, I recognize the significance of algebraic programming systems in comprehending intricate mathematical structures. These programming languages not only provide insights but also play a crucial role in aiding the proof of mathematical conjectures, making them an integral part of my intellectual pursuits.
    </p>
  </div>
  <div id='tech' class='h-56 flex gap-6 overflow-x-scroll items-center'>
    <TechCard 
      name='Python'
      logo='/languages/python.svg'
      website='https://www.python.org/'
    />
    <TechCard 
      name='JavaScript'
      logo='/languages/javascript.svg'
      website='https://www.javascript.com/'
    />
    <TechCard 
      name='Java'
      logo='/languages/java.svg'
      website='https://www.java.com/en/'
    />
    <TechCard 
      name='SageMath'
      logo='/languages/sagemath.svg'
      website='https://www.sagemath.org/'
    />
    <TechCard 
      name='Macaulay2'
      logo='/languages/9planets.jpeg'
      website='https://macaulay2.com/'
    />
    <TechCard 
      name='Spring'
      logo='/frameworks/spring.svg'
      website='https://spring.io/'
    />
    <TechCard 
      name='React'
      logo='/frameworks/react.svg'
      website='https://react.dev/'
    />
    <TechCard 
      name='MatPlotLib'
      logo='/frameworks/matplotlib.svg'
      website='https://matplotlib.org/'
    />
    <TechCard 
      name='NumPy'
      logo='/frameworks/numpy.svg'
      website='https://numpy.org/'
    />
    <TechCard 
      name='Pandas'
      logo='/frameworks/pandas.svg'
      website='https://pandas.pydata.org/'
    />
  </div>
  <h1 class='mt-48 font-display text-5xl'>Latest Project</h1>
  <div class='text-5xl'>ArXiv Game</div>
  <h1 class='mt-48 font-display text-5xl'>Latest Experience</h1>
  <div class='text-5xl'>Amazon Software Engineering Intern</div>
</div>

<script>
  import { gsap } from 'gsap';

  /*
  This helper function makes a group of elements animate along the x-axis in a seamless, responsive loop.

  Features:
  - Uses xPercent so that even if the widths change (like if the window gets resized), it should still work in most cases.
  - When each item animates to the left or right enough, it will loop back to the other side
  - Optionally pass in a config object with values like "speed" (default: 1, which travels at roughly 100 pixels per second), paused (boolean),  repeat, reversed, and paddingRight.
  - The returned timeline will have the following methods added to it:
  - next() - animates to the next element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
  - previous() - animates to the previous element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
  - toIndex() - pass in a zero-based index value of the element that it should animate to, and optionally pass in a vars object to control duration, easing, etc. Always goes in the shortest direction
  - current() - returns the current index (if an animation is in-progress, it reflects the final index)
  - times - an Array of the times on the timeline where each element hits the "starting" spot. There's also a label added accordingly, so "label1" is when the 2nd element reaches the start.
  */

  function horizontalLoop(items, config) {
    items = gsap.utils.toArray(items);
    config = config || {};
    let tl = gsap.timeline({
        repeat: config.repeat,
        paused: config.paused,
        defaults: { ease: "none" },
        onReverseComplete: () => tl.totalTime(tl.rawTime() + tl.duration() * 100),
      }),
      length = items.length,
      startX = items[0].offsetLeft,
      times = [],
      widths = [],
      xPercents = [],
      curIndex = 0,
      pixelsPerSecond = (config.speed || 1) * 100,
      snap = config.snap === false ? (v) => v : gsap.utils.snap(config.snap || 1), // some browsers shift by a pixel to accommodate flex layouts, so for example if width is 20% the first element's width might be 242px, and the next 243px, alternating back and forth. So we snap to 5 percentage points to make things look more natural
      totalWidth,
      curX,
      distanceToStart,
      distanceToLoop,
      item,
      i;
    gsap.set(items, {
      // convert "x" to "xPercent" to make things responsive, and populate the widths/xPercents Arrays to make lookups faster.
      xPercent: (i, el) => {
        let w = (widths[i] = parseFloat(gsap.getProperty(el, "width", "px")));
        xPercents[i] = snap(
          (parseFloat(gsap.getProperty(el, "x", "px")) / w) * 100 +
            gsap.getProperty(el, "xPercent")
        );
        return xPercents[i];
      },
    });
    gsap.set(items, { x: 0 });
    totalWidth =
      items[length - 1].offsetLeft +
      (xPercents[length - 1] / 100) * widths[length - 1] -
      startX +
      items[length - 1].offsetWidth *
        gsap.getProperty(items[length - 1], "scaleX") +
      (parseFloat(config.paddingRight) || 0);
    for (i = 0; i < length; i++) {
      item = items[i];
      curX = (xPercents[i] / 100) * widths[i];
      distanceToStart = item.offsetLeft + curX - startX;
      distanceToLoop =
        distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
      tl.to(
        item,
        {
          xPercent: snap(((curX - distanceToLoop) / widths[i]) * 100),
          duration: distanceToLoop / pixelsPerSecond,
        },
        0
      )
        .fromTo(
          item,
          {
            xPercent: snap(
              ((curX - distanceToLoop + totalWidth) / widths[i]) * 100
            ),
          },
          {
            xPercent: xPercents[i],
            duration:
              (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond,
            immediateRender: false,
          },
          distanceToLoop / pixelsPerSecond
        )
        .add("label" + i, distanceToStart / pixelsPerSecond);
      times[i] = distanceToStart / pixelsPerSecond;
    }
    tl.times = times;
    tl.progress(1, true).progress(0, true); // pre-render for performance
    if (config.reversed) {
      tl.vars.onReverseComplete();
      tl.reverse();
    }
    return tl;
  }

  const boxes = gsap.utils.toArray(".box"),
    loop = horizontalLoop(boxes, { paused: false, speed: 0.75, paddingRight: 24, repeat: -1 });

  const techContainer = document.getElementById('tech');
  techContainer.addEventListener("mouseenter", (event) => {
      loop.pause();
  });

  techContainer.addEventListener("mouseleave", (event) => {
      loop.resume();
  });
</script>
